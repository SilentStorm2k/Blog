{
  "hash": "83f7ce0447cc31cb52ac62d86c0280c2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Better Auth with React native\"\nauthor: \"Shivvanandh Mohan\"\ndate: \"10-07-2025\"\nformat: html\ncategories: [Kuri]\n---\n\n\n# Problem \n\nSo I am setting up a simple app authentication for Kuri and I wanted to have a robust solution that I can extend in the future to MFA, payment portals, etc. in the future. I have worked with [Clerk](https://clerk.com/) before and it was a wonderful and seamless experience. My only problem is that it becomes expensive for more users and scales poorly, and at the moment I am writing this blog, their support with Expo (documentation) is not that good. So I thought why not try [BetterAuth](https://www.better-auth.com/). It is free, open-source, and I can self host it wherever and with full control of everything.\n\nMy problem was that I had previously set up the project with some self written custom Auth code and was using SupaBase auth with it (which is also amazing), so I had some challenge to port from SupaBase to BetterAuth.\n\nAlso some of the documentation provided by BetterAuth (for storing in database) atleast while using DrizzleORM with their drizzle plugin was slightly outdated and that caused some issue with my code, but I am happy to say that I successfully managed to have a very basic Auth flow using BetterAuth.\n\n# How did I do it?\n\nBetterAuth has hands down one of the best documentation for this. I was mostly following through the [Expo Integration guide](https://www.better-auth.com/docs/integrations/expo#expo-client) and the [BetterAuth installation guide](https://www.better-auth.com/docs/installation)\n\nI used the Expo's [API Routes](https://docs.expo.dev/router/reference/api-routes) feature to host my betterAuth instance inside the Expo app itself in the file [...auth]+api.ts\n\nThen you got to install all the dependencies (follow through that guide). \n\nYou got to make sure that you got your correct changes in all the config files\n\n```{.ts filename=\"app.json\"}\n{\n    \"expo\": {\n        ...\n        \"web\": {\n\t\t\t\"output\": \"server\",\n\t\t},\n    }\n}\n```\n\nCreate your metro.config.js file according to [step 7](https://www.better-auth.com/docs/integrations/expo#configure-metro-bundler)\n\nand Create your drizzle config file like this (change the out, schema directories according to where you store your db schemas)\n\n\n```{.ts filename=\"drizzle.config.ts\"}\nimport { defineConfig } from 'drizzle-kit';\n\nexport default defineConfig({\n    out: './drizzle/migrations',\n    schema: './drizzle/schema.ts',\n    dialect: 'postgresql',\n    strict: true,\n    dbCredentials: {\n        url: process.env.DATABASE_URL!,\n    },\n});\n```\n\nFirst go and create Supabase or Neon or whatever backend db you want to use to store your user auth information. I am using SupaBase, and these instructions are primarily for that. \n\nThen you can get your database URL and such. Since I am using DrizzleORM, supabase provides the minimal code to be used with that (check it out).\n\nThen check your .env variables setup\n```{filename=\".env\"}\nBETTER_AUTH_SECRET=yourBetterAuthSecret\nBETTER_AUTH_URL=http://localhost:8081 # Base URL of your app (this for metro local dev, change to production URL when deploying)\nDATABASE_URL=\"yourSupaBaseURL\"\n```\n\n\nCreate your db migrations using the following command, I had my auth.ts stored in a different location and wanted to store all my auth db information under a drizzle folder so my command looked like this.\n\n\n```{sh}\nnpx @better-auth/cli generate --output \"./drizzle/schema.ts\" --config \"./lib/auth.ts\"\n```\n\nThis will generate a schema.ts file which will be your BetterAuth database schema\n\nThen you run the following migrating command from drizzle to push these migration to your Database backend (Supabase for us here)\n\n```{sh}\nnpx drizzle-kit migrate\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}